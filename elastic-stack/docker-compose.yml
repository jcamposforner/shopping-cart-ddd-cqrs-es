version: "3"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs-data:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/ca/ca.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elk-network

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: "docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}"
    ports:
      - "${ES_PORT}:9200"
    environment:
      - node.name=elasticsearch
      - network.host=0.0.0.0
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - certs-data:/usr/share/elasticsearch/config/certs
      - elastic-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk-network

  logstash:
    image: "logstash:${STACK_VERSION}"
    command: --log.level=debug --enable-local-plugin-development
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_started
      setup:
        condition: service_healthy
    networks:
      - elk-network

  filebeat_domain_events:
    image: "docker.elastic.co/beats/filebeat:${STACK_VERSION}"
    command: filebeat -e -strict.perms=false
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./config/filebeat.domain_events.yml:/usr/share/filebeat/filebeat.yml
      - ../var/logs:/logs
    depends_on:
      elasticsearch:
        condition: service_started
      setup:
        condition: service_healthy
    networks:
      - elk-network

  filebeat_access_logs:
    image: "docker.elastic.co/beats/filebeat:${STACK_VERSION}"
    command: filebeat -e -strict.perms=false
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./config/filebeat.access.yml:/usr/share/filebeat/filebeat.yml
      - ../var/logs:/logs
    depends_on:
      elasticsearch:
        condition: service_started
      setup:
        condition: service_healthy
    networks:
      - elk-network

  kibana:
    image: "docker.elastic.co/kibana/kibana:${STACK_VERSION}"
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - certs-data:/usr/share/kibana/config/certs
      - kibana-data:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_started
      setup:
        condition: service_healthy
    networks:
      - elk-network
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  apm-server:
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
    cap_drop: [ "ALL" ]
    ports:
      - ${APM_PORT}:8200
    volumes:
      - ./config/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro
    command: >
      apm-server --strict.perms=false -e
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
        -E output.elasticsearch.username=elastic
        -E output.elasticsearch.password=elastic
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    networks:
      - elk-network

networks:
  elk-network:
    external:
      name: elk8.1-network

volumes:
  certs-data:
    driver: local
  elastic-data:
    driver: local
  kibana-data:
    driver: local